import React, {useState, useEffect, useContext} from 'react' 
import {Link, Navigate} from 'react-router-dom'
import useFetch from 'hooks/useFetch'
import useLocalStorage from 'hooks/useLocalStorage'
import {CurrentUserContext} from '../../context/currentUser'



const Authentication = props => { 
	const [isSuccessfullSubmit, setIsSuccessfullSubmit] = useState(false)
	
	const isLogin = isSuccessfullSubmit;
	const [token, setToken] = useLocalStorage('token')

	const pageTitle = (token) ? 'Sign In' : 'Sign Up'
	const descriptionLink = (token) ? '/register' : '/login'
	const descriptionText = (token) ? 'У Вас уже есть аккаунт, введите свои логин и пароль.' : 'У Вас еще нет аккаунта, зарегистрируйтесь!'
	const apiUrl = (token) ? '/users/login' : '/users'
	const [email, setEmail] = useState(''); //создает хук внутри нашей компонеты
	const [username, setUsername] = useState('');
	const [password, setPassword] = useState(''); 
	
	//const [isSubmitting, setIsSubmitting] = useState(false); //дополнительное состояние isSubmitting, по умолчанию фолс
	const [{response, isLoading, error}, doFetch] = useFetch(apiUrl)
	const [currentUserState, setCurrentUserState] = useContext(CurrentUserContext)
	console.log('currentUserState', currentUserState)
	
	console.log('token', token)
	console.log('isLogin', isLogin)
	console.log('descriptionText', descriptionText)
	console.log('descriptionLink', descriptionLink)
	console.log('apiUrl', apiUrl)
	console.log('pageTitle', pageTitle)
	console.log('currentUserState', currentUserState)

	const handleSubmit = (event) => { //html5 валидация, проверяеть что email валидный
		event.preventDefault() 
		//console.log('data', email, password)
		
		
		const user = isLogin ? {email, password} : {email, password, username}

		doFetch({ 
			method: 'post',
			data: {
				user
			}
		})
	}

	useEffect((isLogin) => {
		if (!response) {
			return
		}
		//localStorage.setItem('token', response.user.token)
		setToken(response.user.token)
		setIsSuccessfullSubmit(true)
		setCurrentUserState(state => ({
			...state, 
			isLoggedIn: true, 
			isLoading: false, 
			currentUser: response.user
		}))

		console.log('response1', response)
		//history.push('/')


		isLogin = (response) ? true : false;
		console.log('isLogin1', isLogin)
	}, [response])

	if (isSuccessfullSubmit) {
		return <Navigate to="/" />
	}


	return (
		<div className='auth-page'>
			<div className='container page'>
				<div className='row'>
					<div className='col-md-6 offset-md-3 col-xs-12'> 
						<h1 className='text-xs-center'>{pageTitle}</h1>
						<p className='text-xs-center'>
							<Link to={descriptionLink}>{descriptionText}</Link>
						</p>
						<form onSubmit={handleSubmit}>
							<fieldset>

								{!token && (
									<fieldset className='form-group'>
									<input 
										type='text' 
										value={username} 
										onChange={e => setUsername(e.target.value)}
										className='form-control form-control-lg' 
										placeholder='Username'/>
								</fieldset>
								)}

								<fieldset className='form-group'>
									<input //каждый раз когда я пишу в инпут, происходит ререндер компонента
										type='email' 
										value={email} 
										onChange={e => setEmail(e.target.value)} 
										className='form-control form-control-lg' 
										placeholder='Email'/>
								</fieldset>
								
								<fieldset className='form-group'>
									<input 
										type='password' 
										value={password} 
										onChange={e => setPassword(e.target.value)}
										className='form-control form-control-lg' 
										placeholder='Password'/>
								</fieldset>

								<button 
									className='btn btn-lg btn-primary pull-xs-right' 
									type='submit'
									disabled={isLoading} //пока запрос отправляется - кнопка не активная
								>{pageTitle}</button>

							</fieldset>
						</form>
					</div>
				</div>
			</div>
		</div>
	)
}

export default Authentication
